#!/bin/bash
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -exuo pipefail

export DEBIAN_FRONTEND=noninteractive
export DBUS_SESSION_BUS_ADDRESS=/dev/null

SUPERDESK_DIR=/opt/superdesk/server
if [ ! -d "$SUPERDESK_DIR" ]; then
echo "   ****Superdesk installations is missing!**** " 1>&2 ; exit 1;
fi

SuperdeskDomain=${1:-'localhost'}

LiveBlogDomain=${2:-'localhost'}

_activate() {
    set +ux
    . /opt/liveblog/activate.sh
    set -ux
}

_missing_db() {
    curl -sI $ELASTICSEARCH_URL/$ELASTICSEARCH_INDEX | grep -q 404
}

_skip_install() {
    dpkg -l | grep '^ii.*'$1 && [ -z ${pkg_upgrade:-''} ]
}

## database
curl -o- https://raw.githubusercontent.com/BlackOrder/SuperdeskInstall/master/subScripts/database | bash

# elasticsearch
wait_elastic() {
    elastic=0
    while [ $elastic -eq 0 ]
    do
        curl -s "http://localhost:9200" 2>&1 > /dev/null \
            && elastic=1 \
            || echo "waiting for elastic..."
        sleep 5
    done
}

if ! _skip_install elasticsearch; then
    # for elasticsearch 2.4.x declare next
    # elastic_version=2.x
    version=${elastic_version:-1.7}
    curl -s https://packages.elastic.co/GPG-KEY-elasticsearch | apt-key add -
    echo "deb https://packages.elastic.co/elasticsearch/$version/debian stable main" \
        > /etc/apt/sources.list.d/elastic.list

    apt-get -y update
    apt-get -y install --no-install-recommends \
        openjdk-8-jre-headless \
        elasticsearch
    unset version
fi

# tune elasticsearch
cfg='/etc/elasticsearch/elasticsearch.yml'
[ -f "${cfg}.bak" ] || mv $cfg $cfg.bak
es_backups=/var/tmp/elasticsearch
if [ ! -d "$es_backups" ]; then
    mkdir $es_backups
    chown elasticsearch:elasticsearch $es_backups
fi
cat <<EOF > $cfg
network.bind_host: 0.0.0.0
node.local: true
discovery.zen.ping.multicast: false
path.repo: $es_backups
index.number_of_replicas: 0
EOF

systemctl enable elasticsearch
systemctl restart elasticsearch
wait_elastic

curl -s -XPUT 'http://localhost:9200/_snapshot/backups' \
    -d '{"type": "fs", "settings": {"location": "'$es_backups'"}}'
unset cfg es_backups


### build
locale-gen en_US.UTF-8

[ -d /var/log/liveblog ] || mkdir -p /var/log/liveblog
systemctl disable rsyslog || true
systemctl stop rsyslog || true

cat <<"EOF" > /etc/logrotate.d/liveblog
/var/log/liveblog/*.log {
    rotate 7
    daily
    missingok
    copytruncate
    notifempty
    nocompress
    size 20M
}
EOF
logrotate /etc/logrotate.conf

f="/opt/liveblog/activate.sh"
dir=$(dirname "$f")
mkdir -p "$dir"

cat <<EOF > /opt/liveblog/activate.sh
. /opt/python3env/bin/activate

set -a
LC_ALL=en_US.UTF-8

# some settings required by client
PATH=/opt/liveblog/client/node_modules/.bin/:\$PATH
SUPERDESK_URL='http://$SuperdeskDomain/api'
SUPERDESK_WS_URL='ws://$SuperdeskDomain/ws'
set +a
EOF

_activate
pip install -U pip wheel

## prepare source code
repo=${repo:-'/opt/liveblog'}
[ -d $repo ] || mkdir $repo
cd $repo
if [ ! -d $repo/.git ]; then
    git init
    git remote add origin https://github.com/liveblog/liveblog.git
    repo_ref=${repo_ref:-'heads/master'}
    repo_sha=
    git fetch origin $repo_ref:
    git checkout ${repo_sha:-FETCH_HEAD}
    unset repo_sha
    unset repo repo_ref
fi

cd /opt/liveblog/server
[ -f dev-requirements.txt ] && req=dev-requirements.txt || req=requirements.txt
time pip install -U -r $req

cd /opt/liveblog/client

set +ux
source ~/.nvm/nvm.sh;
nvm use lts/*;

time sudo npm install

# 3.0.9, 3.1.0 versions need bower
cd /opt/liveblog/client
if [ -f bower.json ]; then
    sudo npm i bower
    time sudo bower --allow-root install
fi

set -ux

### deploy
cat <<"EOF" > /opt/liveblog/activate.sh
# you could write variables to /opt/liveblog/env.sh
. /opt/python3env/bin/activate

set -a
LC_ALL=en_US.UTF-8
PYTHONUNBUFFERED=1
PATH=/opt/liveblog/client/node_modules/.bin/:$PATH

[ ! -f /opt/liveblog/env.sh ] || . /opt/liveblog/env.sh

SUPERDESKHOST=${SUPERDESKHOST:-'ReplaceSuperdeskDomain'}
HOST=${HOST:-'ReplaceLiveBlogDomain'}
HOST_SSL=${HOST_SSL:-}
DB_HOST=${DB_HOST:-'localhost'}
DB_NAME=${DB_NAME:-'liveblog'}

[ -n "${HOST_SSL:-}" ] && SSL='s' || SSL=''
# To work properly inside and outside container, must be
# - "proxy_set_header Host <host>;" in nginx
# - the same "<host>" for next two settings
# TODO: try to fix at backend side, it should accept any host
SUPERDESK_URL="http$SSL://$SUPERDESKHOST/api"
CONTENTAPI_URL="http$SSL://$SUPERDESKHOST/contentapi"
SUPERDESK_WS_URL="ws$SSL://$SUPERDESKHOST/ws"
SUPERDESK_CLIENT_URL="http$SSL://$SUPERDESKHOST"

MONGO_URI="mongodb://$DB_HOST/$DB_NAME"
LEGAL_ARCHIVE_URI="mongodb://$DB_HOST/${DB_NAME}_la"
ARCHIVED_URI="mongodb://$DB_HOST/${DB_NAME}_ar"
ELASTICSEARCH_URL="http://$DB_HOST:9200"
ELASTICSEARCH_INDEX="$DB_NAME"

CONTENTAPI_ELASTICSEARCH_INDEX="${DB_NAME}_ca"
# TODO: fix will be in 1.6 release, keep it for a while
CONTENTAPI_ELASTIC_INDEX=$CONTENTAPI_ELASTICSEARCH_INDEX
CONTENTAPI_MONGO_URI="mongodb://$DB_HOST/${CONTENTAPI_ELASTICSEARCH_INDEX}"

REDIS_URL=${REDIS_URL:-redis://$DB_HOST:6379/1}

C_FORCE_ROOT=1
CELERYBEAT_SCHEDULE_FILENAME=${CELERYBEAT_SCHEDULE_FILENAME:-/tmp/celerybeatschedule}
CELERY_BROKER_URL=${CELERY_BROKER_URL:-$REDIS_URL}

if [ -n "$AMAZON_CONTAINER_NAME" ]; then
    AMAZON_S3_SUBFOLDER=${AMAZON_S3_SUBFOLDER:-'liveblog'}
    MEDIA_PREFIX=${MEDIA_PREFIX:-"http$SSL://$SUPERDESKHOST/api/upload-raw"}

    # TODO: remove after full adoption of MEDIA_PREFIX
    AMAZON_SERVE_DIRECT_LINKS=${AMAZON_SERVE_DIRECT_LINKS:-True}
    AMAZON_S3_USE_HTTPS=${AMAZON_S3_USE_HTTPS:-True}
fi

if [ -n "${SUPERDESK_TESTING:-}" ]; then
    SUPERDESK_TESTING=True
    CELERY_ALWAYS_EAGER=True
    ELASTICSEARCH_BACKUPS_PATH=/var/tmp/elasticsearch
    LEGAL_ARCHIVE=True
fi

### Liveblog custom
S3_THEMES_PREFIX=${S3_THEMES_PREFIX:-"/liveblog/"}
EMBEDLY_KEY=${EMBEDLY_KEY:-}
set +a
EOF

sed -i "s/ReplaceSuperdeskDomain/${SuperdeskDomain}/g" /opt/liveblog/activate.sh
sed -i "s/ReplaceLiveBlogDomain/${LiveBlogDomain}/g" /opt/liveblog/activate.sh

_activate


[ -z "${prepopulate-1}" ] || (
### prepopulate
_activate
cd /opt/liveblog/server
if _missing_db; then
    python manage.py app:initialize_data

    # for master it should be '--admin=true' for devel just '--admin'
    python manage.py users:create --help | grep -- '-a ADMIN' && admin='--admin=true' || admin='--admin'
    python manage.py users:create -u admin -p admin -e 'admin@example.com' $admin

else
    python manage.py app:initialize_data
fi

# fix 'IndexMissingException[[lb-*] missing]' errors
curl -s -XPUT $ELASTICSEARCH_URL/$ELASTICSEARCH_INDEX

python manage.py register_local_themes
python manage.py register_bloglist
)

[ -z "${grunt_build-1}" ] || (
cd /opt/liveblog/client

set +ux
source ~/.nvm/nvm.sh;
nvm use 7.10.1;
set -ux

time sudo grunt build --max-old-space-size=3000 --ws=ws://$LiveBlogDomain/ws
)

# Use latest honcho with --no-colour option
pip install -U honcho gunicorn

gunicorn_opts='-t 300 -w 1 --access-logfile=- --access-logformat="%(m)s %(U)s status=%(s)s time=%(T)ss size=%(B)sb"'
cat <<EOF > /opt/liveblog/server/Procfile
logs: journalctl -u liveblog* -f >> /var/log/liveblog/main.log
rest: gunicorn -b 0.0.0.0:5000 wsgi $gunicorn_opts
wamp: python3 -u ws.py
work: celery -A worker worker -c 1
beat: celery -A worker beat --pid=
EOF


cat <<"EOF" > /etc/systemd/system/liveblog.service
[Unit]
Description=liveblog
Wants=network.target
After=network.target

[Service]
ExecStart=/bin/sh -c '. /opt/liveblog/activate.sh && exec honcho start --no-colour'
WorkingDirectory=/opt/liveblog/server
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF

systemctl enable liveblog
systemctl restart liveblog

# nginx
if ! _skip_install nginx; then
    curl -s http://nginx.org/keys/nginx_signing.key | apt-key add -
    echo "deb http://nginx.org/packages/ubuntu/ xenial nginx" \
        > /etc/apt/sources.list.d/nginx.list

    apt-get -y update
    apt-get -y install nginx
fi

path=/etc/nginx/conf.d
cat <<EOF > $path/liveblog.conf
server {
    listen 80;
    server_name $LiveBlogDomain;
    include $path/liveblog.inc;
}
EOF

cat <<EOF > $path/liveblog.inc
location /ws {
    proxy_pass http://localhost:5100;
    proxy_http_version 1.1;
    proxy_buffering off;
    proxy_read_timeout 3600;
    proxy_set_header Upgrade \$http_upgrade;
    proxy_set_header Connection "Upgrade";
}

location /api {
    proxy_pass http://localhost:5000;
    proxy_set_header Host $LiveBlogDomain;
    expires epoch;

    sub_filter_once off;
    sub_filter_types application/json;
    sub_filter 'http://localhost' 'http://\$host';
}


location /.well-known {
    root /var/tmp;
}
location / {
    root /opt/liveblog/client/dist;

    # TODO: use "config.js:server" for user installations
    sub_filter_once off;
    sub_filter_types application/javascript;
    sub_filter 'http://localhost' 'http://\$host';
    sub_filter 'ws://localhost/ws' 'ws://\$host/ws';
}
EOF

unset path
systemctl enable nginx
systemctl restart nginx

[ -z "${smtp-1}" ] || (
mails=/var/log/liveblog/mail
mkdir -p $mails

smtp_py=/var/tmp/smtp.py
cat <<EOF > $smtp_py
import argparse
import asyncore
import datetime as dt
import logging
import random
import smtpd
from email.parser import Parser
from pathlib import Path

log = logging.getLogger(__name__)
logging.basicConfig(
    level=logging.DEBUG,
    datefmt='[%Y-%m-%d %H:%M:%S %Z]',
    format='%(asctime)s %(message)s'
)

class Server(smtpd.SMTPServer, object):
    """Logging-enabled SMTPServer instance."""

    def __init__(self, path, *args, **kwargs):
        super().__init__(*args, **kwargs)
        path = Path(path)
        path.mkdir(exist_ok=True)
        self._path = path

    def process_message(self, peer, mailfrom, rcpttos, data):
        msg = Parser().parsestr(data)
        subject = msg['subject']
        log.info('to=%r subject=%r', rcpttos, subject)
        for addr in rcpttos:
            name = (
                '{0:%Y%V/%w-%H%M%S}-{1:02d}-{2}.log'
                .format(dt.datetime.now(), random.randint(0, 99), addr)
            )
            log.info('filename=%r to=%r subject=%r', name, addr, subject)
            email = self._path / name
            email.parent.mkdir(exist_ok=True)
            email.write_text(data)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Run an SMTP server.')
    parser.add_argument('addr', help='addr to bind to')
    parser.add_argument('port', type=int, help='port to bind to')
    parser.add_argument('path', help='directory to store to')
    args = parser.parse_args()

    log.info('Starting SMTP server at {0}:{1}'.format(args.addr, args.port))
    server = Server(args.path, (args.addr, args.port), None)
    try:
        asyncore.loop()
    except KeyboardInterrupt:
        log.info('Cleaning up')
EOF

cat <<EOF >> /etc/nginx/conf.d/liveblog.inc
location /mail {
    alias $mails/;
    default_type text/plain;
    autoindex on;
    autoindex_exact_size off;
}
EOF

service=liveblog-smtp
cat <<EOF > /etc/systemd/system/$service.service
[Unit]
Description=Dev SMTP server for liveblog, it doesn't send real emails
Wants=network.target
After=network.target

[Service]
ExecStart=/bin/sh -c '. /opt/python3env/bin/activate && exec python3 $smtp_py $LiveBlogDomain 25 $mails'
WorkingDirectory=/opt/liveblog
Restart=always

[Install]
WantedBy=multi-user.target
EOF
systemctl enable $service
systemctl restart $service

nginx -s reload
unset smtp_py mails
)
